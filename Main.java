import java.util.*;

public class Main {

    static final int WALL = 1;     // –°—Ç–µ–Ω–∞
    static final int PATH = 0;     // –ü—Ä–æ—Ö–æ–¥
    static final int VISITED = 2;  // –ü–æ—Å–µ—â—ë–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞
    static final int FINAL_PATH = 3; // –ü—É—Ç—å –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –¥–æ —Ñ–∏–Ω–∏—à–∞

    static int[][] maze; // —Å–∞–º –ª–∞–±–∏—Ä–∏–Ω—Ç
    static int rows = 10, cols = 10; // —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    static int startX = 0, startY = 0;
    static int endX, endY;

    public static void main(String[] args) {
        // –í–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Scanner scanner = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–º–∏–Ω–∏–º—É–º 10): ");
        rows = Math.max(10, scanner.nextInt());

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ (–º–∏–Ω–∏–º—É–º 10): ");
        cols = Math.max(10, scanner.nextInt());

        endX = rows - 1;
        endY = cols - 1;

        maze = new int[rows][cols];

        generateMaze(); // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        System.out.println("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∞–±–∏—Ä–∏–Ω—Ç:");
        printMaze();

        if (solveMaze(startX, startY)) {
            System.out.println("–ü—É—Ç—å –Ω–∞–π–¥–µ–Ω:");
        } else {
            System.out.println("–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        printMaze(); // –≤—ã–≤–æ–¥ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –ø—É—Ç—ë–º
    }

    // üî∏ –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    static void generateMaze() {
        for (int[] row : maze) Arrays.fill(row, WALL); // –≤—Å–µ —Å—Ç–µ–Ω—ã
        carvePath(startX, startY); // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Ö–æ–¥—ã
        maze[startX][startY] = PATH;
        maze[endX][endY] = PATH;
    }

    // üî∏ –£–±–∏—Ä–∞–µ–º —Å—Ç–µ–Ω—ã –∏ –¥–µ–ª–∞–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏–º—ã–º
    static void carvePath(int x, int y) {
        int[] dx = {0, 0, 2, -2}; // –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑-–ø—Ä–∞–≤–æ-–ª–µ–≤–æ
        int[] dy = {2, -2, 0, 0};

        maze[x][y] = PATH;

        List<Integer> dirs = Arrays.asList(0, 1, 2, 3);
        Collections.shuffle(dirs); // —Ä–∞–Ω–¥–æ–º

        for (int dir : dirs) {
            int nx = x + dx[dir], ny = y + dy[dir];

            if (isInBounds(nx, ny) && maze[nx][ny] == WALL) {
                maze[x + dx[dir] / 2][y + dy[dir] / 2] = PATH;
                carvePath(nx, ny);
            }
        }
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    static boolean isInBounds(int x, int y) {
        return x > 0 && x < rows - 1 && y > 0 && y < cols - 1;
    }

    // üî∏ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø—É—Ç–∏
    static boolean solveMaze(int x, int y) {
        if (x == endX && y == endY) {
            maze[x][y] = FINAL_PATH;
            return true;
        }

        if (!isSafe(x, y)) return false;

        maze[x][y] = VISITED;

        int[] dx = {-1, 1, 0, 0}; // –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑-–ª–µ–≤–æ-–ø—Ä–∞–≤–æ
        int[] dy = {0, 0, -1, 1};

        for (int d = 0; d < 4; d++) {
            int nx = x + dx[d], ny = y + dy[d];
            if (solveMaze(nx, ny)) {
                maze[x][y] = FINAL_PATH;
                return true;
            }
        }

        return false;
    }

    // üî∏ –ë–µ–∑–æ–ø–∞—Å–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞?
    static boolean isSafe(int x, int y) {
        return x >= 0 && x < rows && y >= 0 && y < cols && maze[x][y] == PATH;
    }

    // üî∏ –í—ã–≤–æ–¥ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    static void printMaze() {
        for (int[] row : maze) {
            for (int cell : row) {
                switch (cell) {
                    case WALL -> System.out.print("#");
                    case PATH -> System.out.print(" ");
                    case VISITED -> System.out.print("¬∑");
                    case FINAL_PATH -> System.out.print(".");
                }
            }
            System.out.println();
        }
    }
}
